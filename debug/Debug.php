<?php

/**
 * Concrete class for generating debug dumps related to the output source.
 *
 * @category   Zend
 * @package    Zend_Debug
 * @copyright  Copyright (c) 2005-2008 Zend Technologies USA Inc. (http://www.zend.com)
 * @license    http://framework.zend.com/license/new-bsd     New BSD License
 */

class Debug
{

    /**
     * @var string
     */
    protected static $_sapi = null;
    protected static $_logger = null;

    /**
     * Get the current value of the debug output environment.
     * This defaults to the value of PHP_SAPI.
     *
     * @return string;
     */
    public static function getSapi()
    {
        if (self::$_sapi === null) {
            self::$_sapi = PHP_SAPI;
        }
        return self::$_sapi;
    }

    /**
     * Set the debug ouput environment.
     * Setting a value of null causes Zend_Debug to use PHP_SAPI.
     *
     * @param string $sapi
     * @return void;
     */
    public static function setSapi($sapi)
    {
        self::$_sapi = $sapi;
    }

    /**
     * Debug helper function.  This is a wrapper for var_dump() that adds
     * the <pre /> tags, cleans up newlines and indents, and runs
     * htmlentities() before output.
     *
     * @param  mixed  $var   The variable to dump.
     * @param  string $label OPTIONAL Label to prepend to output.
     * @param  bool   $echo  OPTIONAL Echo output if true.
     * @return string
     */
    public static function dump($var, $label=null, $echo=true)
    {
        // format the label
        $label = ($label===null) ? '' : rtrim($label) . ' ';

        // var_dump the variable into a buffer and keep the output
        ob_start();
        var_dump($var);
        $output = ob_get_clean();

        // neaten the newlines and indents
        $output = preg_replace("/\]\=\>\n(\s+)/m", "] => ", $output);
        if (self::getSapi() == 'cli') {
            $output = PHP_EOL . $label
                    . PHP_EOL . $output
                    . PHP_EOL;
        } else {
            if(!extension_loaded('xdebug')) {
                $output = htmlspecialchars($output, ENT_QUOTES);
            }

            $output = '<pre>'
                    . $label
                    . $output
                    . '</pre>';
        }

        if ($echo) {
            echo($output);
        }
        return $output;
    }

    public static function getLogger()
    {
        return  self::$_logger; 
    }

    public static function setLogger($dir, $level)
    {
        self::$_logger = logger::instance($dir, $level);
    }

}


/**
* Logging class
*
* Usage:
* $log = new logger('/var/log/', logger::INFO );
* $log->logInfo('Returned a million search results'); //Prints to the log file
* $log->logFatal('Oh dear.'); //Prints to the log file
* $log->logDebug('x = 5'); //Prints nothing due to current severity threshhold
*
*/

class logger
{
    /**
* Error severity, from low to high. From BSD syslog RFC, secion 4.1.1
* @link http://www.faqs.org/rfcs/rfc3164.html
*/
    const EMERG = 0; // Emergency: system is unusable
    const ALERT = 1; // Alert: action must be taken immediately
    const CRIT = 2; // Critical: critical conditions
    const ERR = 3; // Error: error conditions
    const WARN = 4; // Warning: warning conditions
    const NOTICE = 5; // Notice: normal but significant condition
    const INFO = 6; // Informational: informational messages
    const DEBUG = 7; // Debug: debug messages

    //custom logging level
    /**
    * Log nothing at all
    */
    const OFF = 8;
    /**
    * Alias for CRIT
    * @deprecated
    */
    const FATAL = 2;

    /**
    * Internal status codes
    */
    const STATUS_LOG_OPEN = 1;
    const STATUS_OPEN_FAILED = 2;
    const STATUS_LOG_CLOSED = 3;

    /**
    * Current status of the log file
    * @var integer
    */
    private $_logStatus = self::STATUS_LOG_CLOSED;
    /**
    * Holds messages generated by the class
    * @var array
    */
    private $_messageQueue = array();
    /**
    * Path to the log file
    * @var string
    */
    private $_logFilePath = null;
    /**
    * Current minimum logging threshold
    * @var integer
    */
    private $_severityThreshold = self::INFO;
    /**
    * This holds the file handle for this instance's log file
    * @var resource
    */
    private $_fileHandle = null;

    /**
    * Standard messages produced by the class. Can be modified for il8n
    * @var array
    */
    private $_messages = array(
        //'writefail' => 'The file exists, but could not be opened for writing. Check that appropriate permissions have been set.',
        'writefail' => 'The file could not be written to. Check that appropriate permissions have been set.',
        'opensuccess' => 'The log file was opened successfully.',
        'openfail' => 'The file could not be opened. Check permissions.',
    );

    private $_colors;

    /**
    * Default severity of log messages, if not specified
    * @var integer
    */
    private static $_defaultSeverity = self::DEBUG;
    /**
    * Valid PHP date() format string for log timestamps
    * @var string
    */
    private static $_dateFormat = 'Y-m-d G:i:s';
    /**
    * Octal notation for default permissions of the log file
    * @var integer
    */
    private static $_defaultPermissions = 0777;
    /**
    * Array of logger instances, part of Singleton pattern
    * @var array
    */
    private static $instances = array();

    /**
    * Partially implements the Singleton pattern. Each $logDirectory gets one
    * instance.
    *
    * @param string $logDirectory File path to the logging directory
    * @param integer $severity One of the pre-defined severity constants
    * @return logger
    */
    public static function instance($logDirectory = false, $severity = false)
    {
        if ($severity === false) {
            $severity = self::$_defaultSeverity;
        }
        
        if ($logDirectory === false) {
            if (count(self::$instances) > 0) {
                return current(self::$instances);
            } else {
                $logDirectory = dirname(__FILE__);
            }
        }

        if (in_array($logDirectory, self::$instances)) {
            return self::$instances[$logDirectory];
        }

        self::$instances[$logDirectory] = new self($logDirectory, $severity);

        return self::$instances[$logDirectory];
    }

    /**
* Class constructor
*
* @param string $logDirectory File path to the logging directory
* @param integer $severity One of the pre-defined severity constants
* @return void
*/
    public function __construct($logDirectory, $severity)
    {
        $logDirectory = rtrim($logDirectory, '\\/');

        if ($severity === self::OFF) {
            return;
        }

        $this->_colors = new Colors();

        $this->_logFilePath = $logDirectory
            . DIRECTORY_SEPARATOR
            . 'log_'
            . date('Y-m-d')
            . '.txt';

        $this->_severityThreshold = $severity;
        if (!file_exists($logDirectory)) {
            mkdir($logDirectory, self::$_defaultPermissions, true);
        }

        if (file_exists($this->_logFilePath) && !is_writable($this->_logFilePath)) {
            $this->_logStatus = self::STATUS_OPEN_FAILED;
            $this->_messageQueue[] = $this->_messages['writefail'];
            return;
        }

        if (($this->_fileHandle = fopen($this->_logFilePath, 'a'))) {
            $this->_logStatus = self::STATUS_LOG_OPEN;
            $this->_messageQueue[] = $this->_messages['opensuccess'];
        } else {
            $this->_logStatus = self::STATUS_OPEN_FAILED;
            $this->_messageQueue[] = $this->_messages['openfail'];
        }
    }

    /**
    * Class destructor
    */
    public function __destruct()
    {
        if ($this->_fileHandle) {
            fclose($this->_fileHandle);
        }
    }
    /**
* Writes a $line to the log with a severity level of DEBUG
*
* @param string $line Information to log
* @return void
*/
    public function logDebug($line)
    {
        ob_start();
        var_dump($line);
        $output = ob_get_clean();

        // neaten the newlines and indents
        $line = preg_replace("/\]\=\>\n(\s+)/m", "] => ", $output);


        $line = $this->_colors->getColoredString(trim($line), "light_blue", null);
        $this->log($line, self::DEBUG);
    }

    /**
    * Returns (and removes) the last message from the queue.
    * @return string
    */
    public function getMessage()
    {
        return array_pop($this->_messageQueue);
    }

    /**
* Returns the entire message queue (leaving it intact)
* @return array
*/
    public function getMessages()
    {
        return $this->_messageQueue;
    }

    /**
    * Empties the message queue
    * @return void
    */
    public function clearMessages()
    {
        $this->_messageQueue = array();
    }

    /**
    * Sets the date format used by all instances of logger
    *
    * @param string $dateFormat Valid format string for date()
    */
    public static function setDateFormat($dateFormat)
    {
        self::$_dateFormat = $dateFormat;
    }

    /**
    * Writes a $line to the log with a severity level of INFO. Any information
    * can be used here, or it could be used with E_STRICT errors
    *
    * @param string $line Information to log
    * @return void
    */
    public function logInfo($line, $trim = false)
    {
        $line = $trim ? $this->trimAll($line) : $line;
        $line = $this->_colors->getColoredString(trim($line), "light_green", null);
        $this->log($line, self::INFO);
    }

    public function trimAll($output)
    {
        $output = str_replace(array("\r\n", "\r"), "\n", $output);
        $lines = explode("\n", $output);
        $new_lines = array();

        foreach ($lines as $i => $line) {
            if(!empty($line))
                $new_lines[] = trim($line) . ' ';
        }
        return implode($new_lines);
    }

    /**
    * Writes a $line to the log with a severity level of NOTICE. Generally
    * corresponds to E_STRICT, E_NOTICE, or E_USER_NOTICE errors
    *
    * @param string $line Information to log
    * @return void
    */
    public function logNotice($line)
    {
        $this->log($line, self::NOTICE);
    }

    /**
    * Writes a $line to the log with a severity level of WARN. Generally
    * corresponds to E_WARNING, E_USER_WARNING, E_CORE_WARNING, or
    * E_COMPILE_WARNING
    *
    * @param string $line Information to log
    * @return void
    */
    public function logWarn($line)
    {
        $this->log($line, self::WARN);
    }

    /**
    * Writes a $line to the log with a severity level of ERR. Most likely used
    * with E_RECOVERABLE_ERROR
    *
    * @param string $line Information to log
    * @return void
    */
    public function logError($line)
    {
        $this->log($line, self::ERR);
    }

    /**
    * Writes a $line to the log with a severity level of FATAL. Generally
    * corresponds to E_ERROR, E_USER_ERROR, E_CORE_ERROR, or E_COMPILE_ERROR
    *
    * @param string $line Information to log
    * @return void
    * @deprecated Use logCrit
    */
    public function logFatal($line)
    {
        $this->log($line, self::FATAL);
    }

    /**
    * Writes a $line to the log with a severity level of ALERT.
    *
    * @param string $line Information to log
    * @return void
    */
    public function logAlert($line)
    {
        $this->log($line, self::ALERT);
    }

    /**
    * Writes a $line to the log with a severity level of CRIT.
    *
    * @param string $line Information to log
    * @return void
    */
    public function logCrit($line)
    {
        $this->log($line, self::CRIT);
    }

    /**
    * Writes a $line to the log with a severity level of EMERG.
    *
    * @param string $line Information to log
    * @return void
    */
    public function logEmerg($line)
    {
        $this->log($line, self::EMERG);
    }

    /**
    * Writes a $line to the log with the given severity
    *
    * @param string $line Text to add to the log
    * @param integer $severity Severity level of log message (use constants)
    */
    public function log($line, $severity)
    {
        if ($this->_severityThreshold >= $severity) {
            $status = $this->_getTimeLine($severity);
            $this->writeFreeFormLine("$status $line \n");
        }
    }

    /**
    * Writes a line to the log without prepending a status or timestamp
    *
    * @param string $line Line to write to the log
    * @return void
    */
    public function writeFreeFormLine($line)
    {
        if ($this->_logStatus == self::STATUS_LOG_OPEN
            && $this->_severityThreshold != self::OFF) {
            if (fwrite($this->_fileHandle, $line) === false) {
                $this->_messageQueue[] = $this->_messages['writefail'];
            }
        }
    }

    private function _getTimeLine($level)
    {
        $time = date(self::$_dateFormat);

        switch ($level) {
            case self::EMERG:
                return "$time - EMERG -->";
            case self::ALERT:
                return "$time - ALERT -->";
            case self::CRIT:
                return "$time - CRIT -->";
            case self::FATAL: # FATAL is an alias of CRIT
                return "$time - FATAL -->";
            case self::NOTICE:
                return "$time - NOTICE -->";
            case self::INFO:
                return "$time - INFO -->";
            case self::WARN:
                return "$time - WARN -->";
            case self::DEBUG:
                return "$time - DEBUG -->";
            case self::ERR:
                return "$time - ERROR -->";
            default:
                return "$time - LOG -->";
        }
    }
}


class Colors {
        private $foreground_colors = array();
        private $background_colors = array();
 
        public function __construct() {
            // Set up shell colors
            $this->foreground_colors['black'] = '0;30';
            $this->foreground_colors['dark_gray'] = '1;30';
            $this->foreground_colors['blue'] = '0;34';
            $this->foreground_colors['light_blue'] = '1;34';
            $this->foreground_colors['green'] = '0;32';
            $this->foreground_colors['light_green'] = '1;32';
            $this->foreground_colors['cyan'] = '0;36';
            $this->foreground_colors['light_cyan'] = '1;36';
            $this->foreground_colors['red'] = '0;31';
            $this->foreground_colors['light_red'] = '1;31';
            $this->foreground_colors['purple'] = '0;35';
            $this->foreground_colors['light_purple'] = '1;35';
            $this->foreground_colors['brown'] = '0;33';
            $this->foreground_colors['yellow'] = '1;33';
            $this->foreground_colors['light_gray'] = '0;37';
            $this->foreground_colors['white'] = '1;37';
 
            $this->background_colors['black'] = '40';
            $this->background_colors['red'] = '41';
            $this->background_colors['green'] = '42';
            $this->background_colors['yellow'] = '43';
            $this->background_colors['blue'] = '44';
            $this->background_colors['magenta'] = '45';
            $this->background_colors['cyan'] = '46';
            $this->background_colors['light_gray'] = '47';
        }
 
        // Returns colored string
        public function getColoredString($string, $foreground_color = null, $background_color = null) {
            $colored_string = "";
 
            // Check if given foreground color found
            if (isset($this->foreground_colors[$foreground_color])) {
                $colored_string .= "\033[" . $this->foreground_colors[$foreground_color] . "m";
            }
            // Check if given background color found
            if (isset($this->background_colors[$background_color])) {
                $colored_string .= "\033[" . $this->background_colors[$background_color] . "m";
            }
 
            // Add string and end coloring
            $colored_string .=  $string . "\033[0m";
 
            return $colored_string;
        }
 
        // Returns all foreground color names
        public function getForegroundColors() {
            return array_keys($this->foreground_colors);
        }
 
        // Returns all background color names
        public function getBackgroundColors() {
            return array_keys($this->background_colors);
        }
    }
